# MCP Agentic SLDC Example (Reference)
# Copy this file to your project as mcp-agentic-sldc.yml and fill in your details.
# Lines starting with '#' are comments and can be removed in your project file.

init: |
  # Onboarding instructions for new contributors or agents.
  - Read mcp-agentic-sldc.yml and README.md to understand the workflow and project goal.
  - Follow the procedures defined below: update, commit, next, check, and handoff.
  - Keep mcp-agentic-sldc.yml and README.md in sync with the codebase.
  - Reference the step number in every commit message.
  - If you see blockers or have suggestions, document and address them before moving on.

author: Your Name (Your Org)

goal: |
  # What is the main objective of this project?
  Build something amazing with clear, agentic SLDC tracking and human-AI collaboration.

overview:
  # List the main phases or milestones of your project.
  - "1. Setup"
  - "2. Core Logic"
  - "3. API"
  - "4. Testing"
  - "5. Documentation"

outcome: |
  # What does success look like?
  A fully-tested, documented, and production-ready project with clear human-AI collaboration workflow.

# Collaboration settings
collaboration:
  default_ai_agent: "claude"
  human_approver: "your.email@company.com"
  approval_timeout: "48h"
  auto_handoff: true

steps:
  - number: 1
    name: "Setup"
    steps:
      - number: 1.1
        description: "Initialize project (e.g., npm init -y)"
        owner: "ai_agent"
        requires_human: false
        done: false
      - number: 1.2
        description: "Add .gitignore and README.md"
        owner: "ai_agent"
        requires_human: false
        done: false
  - number: 2
    name: "Core Logic"
    steps:
      - number: 2.1
        description: "Implement main business logic"
        owner: "ai_agent"
        requires_human: false
        done: false
      - number: 2.2
        description: "Review and approve business logic"
        owner: "human"
        requires_human: true
        done: false
  - number: 3
    name: "API"
    steps:
      - number: 3.1
        description: "Add API endpoint(s)"
        owner: "ai_agent"
        requires_human: false
        done: false
  - number: 4
    name: "Testing"
    steps:
      - number: 4.1
        description: "Write unit and integration tests"
        owner: "ai_agent"
        requires_human: false
        done: false
  - number: 5
    name: "Documentation"
    steps:
      - number: 5.1
        description: "Write/expand README.md"
        owner: "ai_agent"
        requires_human: false
        done: false

procedures:
  - key: update
    number: 1
    name: "update"
    description: |
      Review README.md and mcp-agentic-sldc.yml after each step:
      - Mark the current step as done in mcp-agentic-sldc.yml.
      - Update README.md and mcp-agentic-sldc.yml to reflect the current state and next actions.
      - Check for any blockers or critical points that need to be addressed.
      - Ensure documentation and code are aligned.
  - key: commit
    number: 2
    name: "commit"
    description: |
      Commit changes using the commitStandard defined in this file:
      - Use the format: type(scope step): subject
      - Reference the step number in every commit message.
      - Follow conventional commit standards.
      - Include relevant files in the commit.
  - key: next
    number: 3
    name: "next"
    description: |
      Move to the next actionable step:
      - Only proceed after update and commit are complete.
      - Identify the next actionable step in mcp-agentic-sldc.yml and begin work on it.
      - Check for blockers before proceeding.
  - key: check
    number: 4
    name: "check"
    description: |
      Review mcp-agentic-sldc.yml to determine the current actionable step:
      - Find the first step marked as done: false.
      - Restore context and understand what needs to be done.
      - Use this when returning to work after a break or context loss.
  - key: handoff
    number: 5
    name: "handoff"
    description: |
      Transfer task ownership between human and AI:
      - Package current context and deliverables
      - Notify receiving party with clear expectations
      - Set timeout for response and escalation rules

notes:
  # Project-wide reminders, policies, or tips.
  - "Reference the step in every commit."
  - "Update this file as the project progresses."
  - "Check off each item as you complete it."
  - "Respect human-AI collaboration boundaries."

commitStandard:
  format: "type(scope step): subject"
  types: [feat, fix, docs, test, chore]
  rules:
    - Reference the step in every commit.
    - Use imperative mood.
    - Keep messages concise and descriptive.
  examples:
    - "feat(api 3.1): add API endpoint"
    - "docs(readme 5.1): expand documentation"
