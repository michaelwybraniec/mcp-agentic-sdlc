# MCP Agentic Workflow Example
# Michael Wybraniec, ONE-FRONT 2025
# Contact: michaelwybraniec@me.com
# This file defines the machine- and human-readable workflow for the project.
# It ensures all steps, documentation, and code remain in sync, and enables both agents and humans to track, automate, and maintain project quality.

# React Web App Project
# MCP for React Web App

init: |
  - Read mcp-agentic-workflow.yml and README.md to understand the workflow and project goal.
  - Follow the procedures for update, commit, next, and check.
  - Keep mcp-agentic-workflow.yml and README.md in sync with the codebase.
  - Reference the step number in every commit message.
  - If you see blockers or have suggestions, document and address them before moving on.

author: Casey UI

goal: |
  Build a single-page React app for tracking habits.

overview:
  - "1. Project Setup"
  - "2. UI Components"
  - "3. State Management"
  - "4. API Integration"
  - "5. Testing & Docs"

outcome: |
  A React SPA for habit tracking, with state management, API integration, tests, and docs.

steps:
  - number: 1
    name: "Project Setup"
    steps:
      - number: 1.1
        description: "Create app with create-react-app"
        done: true
      - number: 1.2
        description: "Setup ESLint and Prettier"
        done: true
  - number: 2
    name: "UI Components"
    steps:
      - number: 2.1
        description: "Build HabitList and HabitItem components"
        done: false
  - number: 3
    name: "State Management"
    steps:
      - number: 3.1
        description: "Add Redux for state management"
        done: false
  - number: 4
    name: "API Integration"
    steps:
      - number: 4.1
        description: "Connect to backend API for habits"
        done: false
  - number: 5
    name: "Testing & Docs"
    steps:
      - number: 5.1
        description: "Write unit tests for components"
        done: false
      - number: 5.2
        description: "Document usage in README.md"
        done: false

procedures:
  - key: update
    number: 1
    name: "update"
    description: |
      Review README.md and mcp-agentic-workflow.yml after each step:
      - Mark the current step as done in mcp-agentic-workflow.yml.
      - Update README.md and mcp-agentic-workflow.yml to reflect the current state and next actions.
      - Keep documentation and workflow tracking always in sync with the codebase.
  - key: commit
    number: 2
    name: "commit"
    description: |
      Commit your changes for each step:
      - Use the commitStandard for your commit message.
      - Reference the relevant step in every commit message.
      - Keep your git history clear and aligned with your project workflow.
      - Commit and push your changes.
  - key: next
    number: 3
    name: "next"
    description: |
      Move to the next step:
      - Identify the next actionable step in mcp-agentic-workflow.yml and begin work on it.
  - key: check
    number: 4
    name: "check"
    description: |
      Review mcp-agentic-workflow.yml to determine the current actionable step:
      - Find the first step (or sub-step) that is not marked as done.
      - If the step is not marked as done, report the step number and description.
      - Use this as your starting point for the next work session or after a break.

notes:
  - "Reference the step in every commit."
  - "Update this file as the project progresses."
  - "Check off each item as you complete it."

commitStandard:
  format: "type(scope step): subject"
  types: [feat, fix, docs, test, chore]
  rules:
    - Reference the step in every commit.
    - Use imperative mood.
    - Keep messages concise and descriptive.
  examples:
    - "feat(ui 2.1): add HabitList component"
    - "test(ui 5.1): add tests for HabitItem" 